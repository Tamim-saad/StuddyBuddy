name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PROJECT_DIR: '/opt/studdybuddy'

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    env:
      NODE_ENV: production
      REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
      REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      QDRANT_URL: ${{ secrets.QDRANT_URL }}
      QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Run Pre-Deployment Tests
      run: |
        echo "🧪 Running comprehensive pre-deployment tests..."
        ./scripts/pre-deployment-tests.sh
    
    - name: Stop existing services
      run: |
        echo "� Stopping existing services..."
        docker-compose down --remove-orphans || true
        
    - name: Backup current deployment
      run: |
        echo "💾 Creating backup..."
        timestamp=$(date +%Y%m%d_%H%M%S)
        sudo mkdir -p /var/backups/studdybuddy
        if [ -d "${{ env.PROJECT_DIR }}" ]; then
          sudo cp -r ${{ env.PROJECT_DIR }} /var/backups/studdybuddy/backup_$timestamp
        fi
    
    - name: Prepare deployment directories
      run: |
        echo "📁 Preparing deployment..."
        sudo mkdir -p ${{ env.PROJECT_DIR }}
        sudo chown -R $USER:$USER ${{ env.PROJECT_DIR }}
        cp -r ./* ${{ env.PROJECT_DIR }}/
    
    - name: Create environment configuration
      run: |
        echo "🔧 Creating environment configuration..."
        cd ${{ env.PROJECT_DIR }}
        cat > .env << EOF
        NODE_ENV=production
        PORT=4000
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        EMAIL_USER=${{ secrets.EMAIL_USER }}
        EMAIL_PASS=${{ secrets.EMAIL_PASS }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
        REACT_APP_BASE_URL=http://localhost:4000
        POSTGRES_URI=postgresql://postgres:postgres@postgres:5432/postgres
        QDRANT_URL=http://qdrant:6333
        COMPOSE_PROJECT_NAME=studdybuddy
        EOF
    
    - name: Deploy with Docker Compose
      run: |
        echo "� Starting Docker deployment..."
        cd ${{ env.PROJECT_DIR }}
        docker system prune -f || true
        docker-compose build --no-cache
        docker-compose up -d --remove-orphans
    
    - name: Wait for services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        docker-compose ps
    
    - name: Run Post-Deployment Verification
      run: |
        echo "🔍 Running post-deployment verification..."
        cd ${{ env.PROJECT_DIR }}
        ./scripts/post-deployment-verification.sh
    
    - name: Deployment Summary
      run: |
        echo "🎉 Deployment Summary:"
        echo "✅ Pre-deployment tests passed"
        echo "✅ Application deployed successfully"
        echo "✅ Post-deployment verification passed"
        echo "📱 Application URLs:"
        echo "   Frontend: http://localhost"
        echo "   Backend API: http://localhost:4000"
