name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  VM_IP: ${{ secrets.AZURE_VM_IP }}
  PROJECT_DIR: '/home/azureuser/StuddyBuddy'

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        command_timeout: 15m
        script: |
          echo "üöÄ Starting optimized deployment to Azure VM..."
          
          # Set error handling
          set -e
          
          # Navigate to project directory or clone if doesn't exist
          if [ -d "${{ env.PROJECT_DIR }}" ]; then
            echo "üìÅ Project directory exists, updating..."
            cd ${{ env.PROJECT_DIR }}
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            echo "üìÅ Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git ${{ env.PROJECT_DIR }}
            cd ${{ env.PROJECT_DIR }}
          fi
          
          # Create production environment file
          echo "üîß Creating environment configuration..."
          cat > .env << EOF
          # Production Environment Variables
          NODE_ENV=production
          PORT=4000
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          
          # Azure VM URLs
          REACT_APP_BASE_URL=http://${{ env.VM_IP }}:4000
          BACKEND_URL=http://${{ env.VM_IP }}:4000
          FRONTEND_URL=http://${{ env.VM_IP }}
          
          # Database Configuration
          POSTGRES_URI=postgresql://postgres:postgres@postgres:5432/postgres
          
          # Vector Database Configuration
          QDRANT_URL=http://qdrant:6333
          
          # Docker Configuration
          COMPOSE_PROJECT_NAME=studdybuddy
          VM_PUBLIC_IP=${{ env.VM_IP }}
          VM_PRIVATE_IP=10.1.0.4
          EOF
          
          # Optimized Docker deployment
          echo "üî® Starting optimized Docker deployment..."
          
          # Stop existing containers first
          docker-compose down --remove-orphans || true
          
          # Clean up Docker system to free space
          docker system prune -f || true
          
          # Update package-lock.json in backend to ensure consistency
          cd backend
          if [ -f package-lock.json ]; then
            echo "üîÑ Updating package-lock.json for consistency..."
            npm install --package-lock-only || echo "‚ö†Ô∏è Package lock update failed, continuing..."
          else
            echo "üì¶ Generating package-lock.json..."
            npm install --package-lock-only || echo "‚ö†Ô∏è Package lock generation failed, continuing..."
          fi
          cd ..
          
          # Update package-lock.json in frontend to ensure consistency
          cd frontend
          if [ -f package-lock.json ]; then
            echo "üîÑ Updating frontend package-lock.json for consistency..."
            npm install --package-lock-only || echo "‚ö†Ô∏è Frontend package lock update failed, continuing..."
          else
            echo "üì¶ Generating frontend package-lock.json..."
            npm install --package-lock-only || echo "‚ö†Ô∏è Frontend package lock generation failed, continuing..."
          fi
          cd ..
          
          # Build and start services with better error handling
          echo "üî® Building backend service..."
          if ! DOCKER_BUILDKIT=1 docker-compose build --no-cache backend; then
            echo "‚ùå Backend build failed with Docker BuildKit. Trying without BuildKit..."
            if ! docker-compose build --no-cache backend; then
              echo "‚ùå Backend build failed completely. Checking logs..."
              docker-compose logs backend --tail=50
              exit 1
            fi
          fi
          
          echo "üî® Building frontend service..."
          if ! DOCKER_BUILDKIT=1 docker-compose build --no-cache frontend; then
            echo "‚ùå Frontend build failed with Docker BuildKit. Trying without BuildKit..."
            if ! docker-compose build --no-cache frontend; then
              echo "‚ùå Frontend build failed completely. Trying to fix npm issues..."
              # Try to fix npm issues within the build context
              docker-compose run --rm frontend sh -c "npm cache clean --force && npm install --legacy-peer-deps" || true
              if ! docker-compose build --no-cache frontend; then
                echo "‚ùå Frontend build failed after npm fix. Checking logs..."
                docker-compose logs frontend --tail=50
                exit 1
              fi
            fi
          fi
          
          echo "üöÄ Starting all services..."
          docker-compose up -d --remove-orphans
          
          # Quick health check with reduced wait time
          echo "üè• Performing quick health checks..."
          
          # Show running containers for debugging
          echo "üìä Current container status:"
          docker-compose ps
          
          # Wait for services to be ready (reduced from 30s to 15s)
          echo "‚è≥ Waiting for services to start..."
          sleep 15
          
          # Check backend health with fewer retries
          echo "üîç Checking backend health..."
          BACKEND_READY=false
          for i in {1..8}; do
            if curl -f --max-time 5 http://localhost:4000/api/health >/dev/null 2>&1; then
              echo "‚úÖ Backend is healthy"
              BACKEND_READY=true
              break
            else
              echo "‚è≥ Waiting for backend... (attempt $i/8)"
              sleep 5
            fi
          done
          
          if [ "$BACKEND_READY" = false ]; then
            echo "‚ùå Backend health check failed. Showing logs and container status..."
            echo "üìä Container status:"
            docker-compose ps
            echo "üìã Backend logs:"
            docker-compose logs backend --tail=30
            echo "üìã Postgres logs:"
            docker-compose logs postgres --tail=10
            echo "üìã Qdrant logs:"
            docker-compose logs qdrant --tail=10
            exit 1
          fi
          
          # Check frontend health with fewer retries
          echo "üîç Checking frontend health..."
          FRONTEND_READY=false
          for i in {1..5}; do
            if curl -f --max-time 5 http://localhost/ >/dev/null 2>&1; then
              echo "‚úÖ Frontend is healthy"
              FRONTEND_READY=true
              break
            else
              echo "‚è≥ Waiting for frontend... (attempt $i/5)"
              sleep 5
            fi
          done
          
          if [ "$FRONTEND_READY" = false ]; then
            echo "‚ö†Ô∏è Frontend health check failed, but continuing deployment"
          fi
          
          echo "üéâ Deployment completed successfully!"
          echo "üì± Application URLs:"
          echo "   Frontend: http://${{ env.VM_IP }}"
          echo "   Backend API: http://${{ env.VM_IP }}:4000"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi
