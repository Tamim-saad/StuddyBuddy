version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      PORT: 4000
      POSTGRES_URI: ${POSTGRES_URI}
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      REACT_APP_GOOGLE_CLIENT_ID: ${REACT_APP_GOOGLE_CLIENT_ID}
      FRONTEND_URL: ${FRONTEND_URL}
      REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
        - nginx:alpine
      args:
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
        REACT_APP_GOOGLE_CLIENT_ID: ${REACT_APP_GOOGLE_CLIENT_ID}
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  uploads_data:
  postgres_data:

networks:
  app-network:
    driver: bridge